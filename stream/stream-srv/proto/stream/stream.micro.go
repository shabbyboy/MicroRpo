// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: github.com/microhq/stream-srv/proto/stream/stream.proto

/*
Package go_micro_srv_stream is a generated protocol buffer package.

It is generated from these files:
	github.com/microhq/stream-srv/proto/stream/stream.proto

It has these top-level messages:
	CreateRequest
	CreateResponse
	Message
	PubResponse
	SubscribeRequest
*/
package go_micro_srv_stream

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Stream service

type StreamService interface {
	Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error)
	Publish(ctx context.Context, opts ...client.CallOption) (Stream_PublishService, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...client.CallOption) (Stream_SubscribeService, error)
}

type streamService struct {
	c    client.Client
	name string
}

func NewStreamService(name string, c client.Client) StreamService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.srv.stream"
	}
	return &streamService{
		c:    c,
		name: name,
	}
}

func (c *streamService) Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error) {
	req := c.c.NewRequest(c.name, "Stream.Create", in)
	out := new(CreateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamService) Publish(ctx context.Context, opts ...client.CallOption) (Stream_PublishService, error) {
	req := c.c.NewRequest(c.name, "Stream.Publish", &Message{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &streamServicePublish{stream}, nil
}

type Stream_PublishService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Message) error
}

type streamServicePublish struct {
	stream client.Stream
}

func (x *streamServicePublish) Close() error {
	return x.stream.Close()
}

func (x *streamServicePublish) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *streamServicePublish) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *streamServicePublish) Send(m *Message) error {
	return x.stream.Send(m)
}

func (c *streamService) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...client.CallOption) (Stream_SubscribeService, error) {
	req := c.c.NewRequest(c.name, "Stream.Subscribe", &SubscribeRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &streamServiceSubscribe{stream}, nil
}

type Stream_SubscribeService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*Message, error)
}

type streamServiceSubscribe struct {
	stream client.Stream
}

func (x *streamServiceSubscribe) Close() error {
	return x.stream.Close()
}

func (x *streamServiceSubscribe) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *streamServiceSubscribe) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *streamServiceSubscribe) Recv() (*Message, error) {
	m := new(Message)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Stream service

type StreamHandler interface {
	Create(context.Context, *CreateRequest, *CreateResponse) error
	Publish(context.Context, Stream_PublishStream) error
	Subscribe(context.Context, *SubscribeRequest, Stream_SubscribeStream) error
}

func RegisterStreamHandler(s server.Server, hdlr StreamHandler, opts ...server.HandlerOption) error {
	type stream interface {
		Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error
		Publish(ctx context.Context, stream server.Stream) error
		Subscribe(ctx context.Context, stream server.Stream) error
	}
	type Stream struct {
		stream
	}
	h := &streamHandler{hdlr}
	return s.Handle(s.NewHandler(&Stream{h}, opts...))
}

type streamHandler struct {
	StreamHandler
}

func (h *streamHandler) Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error {
	return h.StreamHandler.Create(ctx, in, out)
}

func (h *streamHandler) Publish(ctx context.Context, stream server.Stream) error {
	return h.StreamHandler.Publish(ctx, &streamPublishStream{stream})
}

type Stream_PublishStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*Message, error)
}

type streamPublishStream struct {
	stream server.Stream
}

func (x *streamPublishStream) Close() error {
	return x.stream.Close()
}

func (x *streamPublishStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *streamPublishStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *streamPublishStream) Recv() (*Message, error) {
	m := new(Message)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *streamHandler) Subscribe(ctx context.Context, stream server.Stream) error {
	m := new(SubscribeRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.StreamHandler.Subscribe(ctx, m, &streamSubscribeStream{stream})
}

type Stream_SubscribeStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Message) error
}

type streamSubscribeStream struct {
	stream server.Stream
}

func (x *streamSubscribeStream) Close() error {
	return x.stream.Close()
}

func (x *streamSubscribeStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *streamSubscribeStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *streamSubscribeStream) Send(m *Message) error {
	return x.stream.Send(m)
}
