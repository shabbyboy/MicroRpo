// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/microhq/stream-srv/proto/stream/stream.proto

package go_micro_srv_stream

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CreateRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateRequest) Reset()         { *m = CreateRequest{} }
func (m *CreateRequest) String() string { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()    {}
func (*CreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_16e525298da53f3d, []int{0}
}

func (m *CreateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateRequest.Unmarshal(m, b)
}
func (m *CreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateRequest.Marshal(b, m, deterministic)
}
func (m *CreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRequest.Merge(m, src)
}
func (m *CreateRequest) XXX_Size() int {
	return xxx_messageInfo_CreateRequest.Size(m)
}
func (m *CreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRequest proto.InternalMessageInfo

func (m *CreateRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type CreateResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateResponse) Reset()         { *m = CreateResponse{} }
func (m *CreateResponse) String() string { return proto.CompactTextString(m) }
func (*CreateResponse) ProtoMessage()    {}
func (*CreateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_16e525298da53f3d, []int{1}
}

func (m *CreateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateResponse.Unmarshal(m, b)
}
func (m *CreateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateResponse.Marshal(b, m, deterministic)
}
func (m *CreateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateResponse.Merge(m, src)
}
func (m *CreateResponse) XXX_Size() int {
	return xxx_messageInfo_CreateResponse.Size(m)
}
func (m *CreateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateResponse proto.InternalMessageInfo

type Message struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_16e525298da53f3d, []int{2}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Message) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type PubResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PubResponse) Reset()         { *m = PubResponse{} }
func (m *PubResponse) String() string { return proto.CompactTextString(m) }
func (*PubResponse) ProtoMessage()    {}
func (*PubResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_16e525298da53f3d, []int{3}
}

func (m *PubResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PubResponse.Unmarshal(m, b)
}
func (m *PubResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PubResponse.Marshal(b, m, deterministic)
}
func (m *PubResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubResponse.Merge(m, src)
}
func (m *PubResponse) XXX_Size() int {
	return xxx_messageInfo_PubResponse.Size(m)
}
func (m *PubResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PubResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PubResponse proto.InternalMessageInfo

type SubscribeRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeRequest) Reset()         { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()    {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_16e525298da53f3d, []int{4}
}

func (m *SubscribeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeRequest.Unmarshal(m, b)
}
func (m *SubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeRequest.Merge(m, src)
}
func (m *SubscribeRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeRequest.Size(m)
}
func (m *SubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeRequest proto.InternalMessageInfo

func (m *SubscribeRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*CreateRequest)(nil), "go.micro.srv.stream.CreateRequest")
	proto.RegisterType((*CreateResponse)(nil), "go.micro.srv.stream.CreateResponse")
	proto.RegisterType((*Message)(nil), "go.micro.srv.stream.Message")
	proto.RegisterType((*PubResponse)(nil), "go.micro.srv.stream.PubResponse")
	proto.RegisterType((*SubscribeRequest)(nil), "go.micro.srv.stream.SubscribeRequest")
}

func init() {
	proto.RegisterFile("github.com/microhq/stream-srv/proto/stream/stream.proto", fileDescriptor_16e525298da53f3d)
}

var fileDescriptor_16e525298da53f3d = []byte{
	// 256 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xd1, 0x4a, 0xc3, 0x30,
	0x14, 0x86, 0xd7, 0x22, 0x1d, 0x3b, 0xba, 0x31, 0x8e, 0x37, 0xa3, 0x08, 0x96, 0x88, 0xd0, 0x9b,
	0xa5, 0xa2, 0x17, 0x3e, 0x80, 0xd7, 0x83, 0xd1, 0xfa, 0x02, 0x49, 0x1b, 0xda, 0x80, 0x35, 0x5b,
	0x4e, 0xb2, 0x07, 0xf0, 0xc9, 0x85, 0xac, 0x0e, 0x1d, 0x75, 0x57, 0x09, 0xe7, 0xfc, 0x3f, 0xff,
	0xff, 0x71, 0xe0, 0xb5, 0xd5, 0xae, 0xf3, 0x92, 0xd7, 0xa6, 0x2f, 0x7a, 0x5d, 0x5b, 0xd3, 0xed,
	0x0b, 0x72, 0x56, 0x89, 0x7e, 0x4d, 0xf6, 0x50, 0xec, 0xac, 0x71, 0x66, 0x18, 0x0c, 0x0f, 0x0f,
	0x33, 0xbc, 0x6d, 0x0d, 0x0f, 0x06, 0x4e, 0xf6, 0xc0, 0x8f, 0x2b, 0x76, 0x0f, 0xf3, 0x37, 0xab,
	0x84, 0x53, 0xa5, 0xda, 0x7b, 0x45, 0x0e, 0x17, 0x10, 0xeb, 0x66, 0x15, 0x65, 0x51, 0x3e, 0x2b,
	0x63, 0xdd, 0xb0, 0x25, 0x2c, 0x7e, 0x04, 0xb4, 0x33, 0x9f, 0xa4, 0xd8, 0x1a, 0xa6, 0x1b, 0x45,
	0x24, 0x5a, 0x75, 0x2e, 0x46, 0x84, 0xab, 0x46, 0x38, 0xb1, 0x8a, 0xb3, 0x28, 0xbf, 0x29, 0xc3,
	0x9f, 0xcd, 0xe1, 0x7a, 0xeb, 0xe5, 0xc9, 0xcd, 0x60, 0x59, 0x79, 0x49, 0xb5, 0xd5, 0xf2, 0xbf,
	0xcc, 0xe7, 0xaf, 0x18, 0x92, 0x2a, 0xf4, 0xc3, 0x0a, 0x92, 0x63, 0x3c, 0x32, 0x3e, 0xd2, 0x9f,
	0xff, 0x29, 0x9f, 0x3e, 0x5c, 0xd4, 0x0c, 0x0d, 0x26, 0xb8, 0x81, 0xe9, 0xd6, 0xcb, 0x0f, 0x4d,
	0x1d, 0xde, 0x8d, 0x3a, 0x06, 0xbe, 0x34, 0x1b, 0xdd, 0xfe, 0xc6, 0x99, 0xe4, 0x11, 0xbe, 0xc3,
	0xec, 0x84, 0x84, 0x8f, 0xa3, 0x96, 0x73, 0xe4, 0xf4, 0x62, 0x2e, 0x9b, 0x3c, 0x45, 0x32, 0x09,
	0x57, 0x7b, 0xf9, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x4f, 0xbf, 0x8b, 0x38, 0xf0, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StreamClient is the client API for Stream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Publish(ctx context.Context, opts ...grpc.CallOption) (Stream_PublishClient, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (Stream_SubscribeClient, error)
}

type streamClient struct {
	cc *grpc.ClientConn
}

func NewStreamClient(cc *grpc.ClientConn) StreamClient {
	return &streamClient{cc}
}

func (c *streamClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/go.micro.srv.stream.Stream/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamClient) Publish(ctx context.Context, opts ...grpc.CallOption) (Stream_PublishClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Stream_serviceDesc.Streams[0], "/go.micro.srv.stream.Stream/Publish", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamPublishClient{stream}
	return x, nil
}

type Stream_PublishClient interface {
	Send(*Message) error
	CloseAndRecv() (*PubResponse, error)
	grpc.ClientStream
}

type streamPublishClient struct {
	grpc.ClientStream
}

func (x *streamPublishClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamPublishClient) CloseAndRecv() (*PubResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PubResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (Stream_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Stream_serviceDesc.Streams[1], "/go.micro.srv.stream.Stream/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Stream_SubscribeClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type streamSubscribeClient struct {
	grpc.ClientStream
}

func (x *streamSubscribeClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamServer is the server API for Stream service.
type StreamServer interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Publish(Stream_PublishServer) error
	Subscribe(*SubscribeRequest, Stream_SubscribeServer) error
}

func RegisterStreamServer(s *grpc.Server, srv StreamServer) {
	s.RegisterService(&_Stream_serviceDesc, srv)
}

func _Stream_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.srv.stream.Stream/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stream_Publish_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServer).Publish(&streamPublishServer{stream})
}

type Stream_PublishServer interface {
	SendAndClose(*PubResponse) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type streamPublishServer struct {
	grpc.ServerStream
}

func (x *streamPublishServer) SendAndClose(m *PubResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamPublishServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Stream_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamServer).Subscribe(m, &streamSubscribeServer{stream})
}

type Stream_SubscribeServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type streamSubscribeServer struct {
	grpc.ServerStream
}

func (x *streamSubscribeServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

var _Stream_serviceDesc = grpc.ServiceDesc{
	ServiceName: "go.micro.srv.stream.Stream",
	HandlerType: (*StreamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Stream_Create_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Publish",
			Handler:       _Stream_Publish_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _Stream_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/microhq/stream-srv/proto/stream/stream.proto",
}
